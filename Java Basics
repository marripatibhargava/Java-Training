package com.company;

public class Main {

    public static void main(String[] args) {
        //Print Statment
        System.out.println("Hello World");
        System.out.print("Hello, Java");
        //Variables
        String name = "Bhargava Krishna Marripati";
        String name2 = name.replace('a', 'b');
        System.out.println(name2);
        String name3 = "Bhargava & Rajesh";
        System.out.println(name3.substring(0,3));
        //Non - Primitive Types
        System.out.println(name.length());
        String neighbour = "Yathi Rajesh";
        String combines_name = name + neighbour;
        System.out.println(combines_name);
        int age = 29;
        // Storing one variable in another variable
        String friend = neighbour;
        //byte - 1 [-128 to 127]
        byte my_age = 30;
        //short - 2
        //int - 4
        int phone = 79;
        long phone2 =5261;
        //float - 4
        float pi = 3.14F;
        char letter = '@';
        //double - 8
        //char - 2
        //boolean - 1 true/false
        boolean isAdult = false;

    }
}


..........
Variables
        String name = "Bhargava Krishna";
        int age = 29;
        String friend = "Vinay";
        float myFloatNum = 5.99f;
        char myLetter = 'D';
        boolean myBool = true;

        //Try this: for how to use variables
        System.out.println(name);

        // Widening Casting
        public class Main {
            public static void main(String[] args) {
                int myInt = 9;
                double myDouble = myInt; // Automatic casting: int to double

                System.out.println(myInt);      // Outputs 9
                System.out.println(myDouble);   // Outputs 9.0
            }
        }
        // Narrowing Casting
        public class Main {
            public static void main(String[] args) {
                double myDouble = 9.78d;
                int myInt = (int) myDouble; // Manual casting: double to int

                System.out.println(myDouble);   // Outputs 9.78
                System.out.println(myInt);      // Outputs 9
            }
}
.............
Strings

        //String Length
        String txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        System.out.println("The length of the txt string is: " + txt.length());

        //toUpperCase() and toLowerCase():
        System.out.println(txt.toUpperCase());
        System.out.println(txt.toLowerCase());

        //indexOf()
        String txt = "Please locate where 'locate' occurs!";
        System.out.println(txt.indexOf("locate"));

        //String Concatenation
        String firstName = "John";
        String lastName = "Doe";
        System.out.println(firstName + " " + lastName);

        //You can also use the concat() method to concatenate two strings:
        String firstName = "John ";
        String lastName = "Doe";
        System.out.println(firstName.concat(lastName));

        //Adding Numbers and Strings

        //Two Numbers
        int x = 10;
        int y = 20;
        int z = x + y;

        //two strings
        String x = "10";
        String y = "20";
        String z = x + y;

        //add a number and a string
        String x = "10";
        int y = 20;
        String z = x + y;
.........................
Maths

// To know the max/ min
System.out.println(Math.max(5, 10));
// To know the Squareroot 
System.out.println(Math.sqrt(64));
//Abosulute
System.out.println(Math.abs(-4.7)); 
//Random
Math.random();
// Random
int randomNum = (int)(Math.random() * 101);  // 0 to 100
    System.out.println(randomNum);
.................
Boolean

//Boolean Values
boolean isJavaFun = true;
boolean isFishTasty = false;    
System.out.println(isJavaFun);
System.out.println(isFishTasty);

//Boolean Expression
int x = 10;
int y = 9;
System.out.println(x > y);

.............
Java If ... Else

//The if Statement
if (20 > 18) {
      System.out.println("20 is greater than 18"); // obviously
    }  
    
(or)

int x = 20;
int y = 18;
if (x > y) {
  System.out.println("x is greater than y");
}

//Else Statement

int time = 20;
if (time < 18) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}

//The else if Statement

int time = 22;
if (time < 10) {
  System.out.println("Good morning.");
} else if (time < 20) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}

//Short Hand If...Else
int time = 20;
String result = (time < 18) ? "Good day." : "Good evening.";
System.out.println(result);

......
Java Switch

int day = 4;
switch (day) {
  case 1:
    System.out.println("Monday");
    break;
  case 2:
    System.out.println("Tuesday");
    break;
  case 3:
    System.out.println("Wednesday");
    break;
  case 4:
    System.out.println("Thursday");
    break;
  case 5:
    System.out.println("Friday");
    break;
  case 6:
    System.out.println("Saturday");
    break;
  case 7:
    System.out.println("Sunday");
    break;
}

//The default Keyword
int day = 4;
switch (day) {
  case 6:
    System.out.println("Today is Saturday");
    break;
  case 7:
    System.out.println("Today is Sunday");
    break;
  default:
    System.out.println("Looking forward to the Weekend");
}
..........
//While Loop

int i = 0;
while (i < 5) {
  System.out.println(i);
  i++;
}

//The Do/While Loop

int i = 0;
do {
  System.out.println(i);
  i++;
}
while (i < 5);

...........

//For Loop

for (int i = 0; i < 5; i++) {
  System.out.println(i);
}


for (int i = 0; i <= 10; i = i + 2) {
  System.out.println(i);
}

//For-Each Loop

String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (String i : cars) {
  System.out.println(i);
}

....

//Java Break

for (int i = 0; i < 10; i++) {
  if (i == 4) {
    break;
  }
  System.out.println(i);
}
...
int i = 0;
while (i < 10) {
  System.out.println(i);
  i++;
  if (i == 4) {
    break;
  }
}

//Java Continue

for (int i = 0; i < 10; i++) {
  if (i == 4) {
    continue;
  }
  System.out.println(i);
}
...
int i = 0;
while (i < 10) {
  if (i == 4) {
    i++;
    continue;
  }
  System.out.println(i);
  i++;
}
...........
Arrays:

String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
System.out.println(cars[0]);

int[] myNum = {10, 20, 30, 40};

//Change an Array Element
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
cars[0] = "Opel";
System.out.println(cars[0]);

//Array Length
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
System.out.println(cars.length);

//Loop Through an Array
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (int i = 0; i < cars.length; i++) {
  System.out.println(cars[i]);
}

//Loop Through an Array with For-Each
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (String i : cars) {
  System.out.println(i);
}

//Multidimensional Arrays
int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };
int x = myNumbers[1][2];
System.out.println(x); // Outputs 7

// User input
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        System.out.println("Taking the input from the user");
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number 1");
        int a =sc.nextInt();
        System.out.println("Enter number 2");
        int b =sc.nextInt();
        int sum = a + b;
        System.out.println("The sum of these numbers is");
        System.out.println(sum);
    }
}

//Method

public class Main {
  static void myMethod() {
    System.out.println("I just got executed!");
  }

  public static void main(String[] args) {
    myMethod();
  }
}

//Parameters and Arguments
public class Main {
  static void myMethod(String fname) {
    System.out.println(fname + " Refsnes");
  }

  public static void main(String[] args) {
    myMethod("Liam");
    myMethod("Jenny");
    myMethod("Anja");
  }
}

//Multiple Parameters

public class Main {
  static void myMethod(String fname, int age) {
    System.out.println(fname + " is " + age);
  }

  public static void main(String[] args) {
    myMethod("Liam", 5);
    myMethod("Jenny", 8);
    myMethod("Anja", 31);
  }
}

//Return
public class Main {
  static int myMethod(int x) {
    return 5 + x;
  }

  public static void main(String[] args) {
    System.out.println(myMethod(3));
  }
}
...
public class Main {
  static int myMethod(int x, int y) {
    return x + y;
  }

  public static void main(String[] args) {
    System.out.println(myMethod(5, 3));
  }
}

//A Method with If...Else
public class Main {

  // Create a checkAge() method with an integer variable called age
  static void checkAge(int age) {

    // If age is less than 18, print "access denied"
    if (age < 18) {
      System.out.println("Access denied - You are not old enough!");

    // If age is greater than, or equal to, 18, print "access granted"
    } else {
      System.out.println("Access granted - You are old enough!");
    }

  }

  public static void main(String[] args) {
    checkAge(20); // Call the checkAge method and pass along an age of 20
  }
}

//Method Overloading : With method overloading, multiple methods can have the same name with different parameters:

public class Main {
  static int plusMethod(int x, int y) {
    return x + y;
  }
  
  static double plusMethod(double x, double y) {
    return x + y;
  }
  
  public static void main(String[] args) {
    int myNum1 = plusMethod(8, 5);
    double myNum2 = plusMethod(4.3, 6.26);
    System.out.println("int: " + myNum1);
    System.out.println("double: " + myNum2);
  }
}

//Java Scope :In Java, variables are only accessible inside the region they are created. This is called scope.

public class Main {
  public static void main(String[] args) {

    // Code here CANNOT use x

    { // This is a block

      // Code here CANNOT use x

      int x = 100;

      // Code here CAN use x
      System.out.println(x);

   } // The block ends here

  // Code here CANNOT use x
  
  }
}

//Java Recursion : Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve.

public class Main {
  public static void main(String[] args) {
    int result = sum(10);
    System.out.println(result);
  }
  public static int sum(int k) {
    if (k > 0) {
      return k + sum(k - 1);
    } else {
      return 0;
    }
  }
}
//When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. 
When k becomes 0, the function just returns 0. When running, the program follows these steps:

10 + sum(9)
10 + ( 9 + sum(8) )
10 + ( 9 + ( 8 + sum(7) ) )
...
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0)
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0  //

//Halting Condition: Just as loops can run into the problem of infinite looping, recursive functions can run into the problem of infinite recursion. 
Infinite recursion is when the function never stops calling itself. Every recursive function should have a halting condition, 
which is the condition where the function stops calling itself. 


public class Main {
  public static void main(String[] args) {
    int result = sum(5, 10);
    System.out.println(result);
  }
  public static int sum(int start, int end) {
    if (end > start) {
      return end + sum(start, end - 1);
    } else {
      return end;
    }
  }
}
